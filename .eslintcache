[{"E:\\cascience-proj-demo\\src\\index.js":"1","E:\\cascience-proj-demo\\src\\App.js":"2","E:\\cascience-proj-demo\\src\\upload_component.js":"3","E:\\cascience-proj-demo\\src\\camera.js":"4"},{"size":209,"mtime":1615426343162,"results":"5","hashOfConfig":"6"},{"size":4644,"mtime":1615700071658,"results":"7","hashOfConfig":"6"},{"size":1596,"mtime":1609330045909,"results":"8","hashOfConfig":"6"},{"size":6802,"mtime":1615698923809,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"ok9qrp",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\cascience-proj-demo\\src\\index.js",[],["22","23"],"E:\\cascience-proj-demo\\src\\App.js",["24","25"],"import React from 'react';\nimport { message, Spin } from 'antd';\nimport WebCamWebAPI from './camera';\nimport socketIOClient from 'socket.io-client';\nimport * as tf from '@tensorflow/tfjs';\nimport './App.css';\n\nfunction tensor2array_3d_helper(tensor){\n    // transfer the 3d-tf.tensor to 3d-jsarray\n    const _1darray = Array.from(tensor.dataSync());\n    const [m,n_h,n_w] = [3, 224, 224];\n    const _3darray = new Array();\n    for(let i = 0; i < m; i++){\n        let demo = new Array(n_h);\n        for(let j = 0; j < n_h; j++){\n            demo[j] = new Array();\n            for(let k = 0; k < n_w; k++){\n                demo[j][k] = _1darray[i*n_h*n_w + j*n_w + k];\n            }\n        }\n        _3darray.push(demo);\n    }\n    return _3darray;\n    // 返回一个四维数组\n}\n// ————————————————\n// 版权声明：本文为CSDN博主「韩澈」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n// 原文链接：https://blog.csdn.net/qq_44354981/article/details/105018786\n\nclass App extends React.Component {\n    state = {\n        socket: socketIOClient(\"http://localhost:1616\"),\n        data: '',\n        prediction: 'null',\n        loaded: false,\n    }\n\n    componentDidMount() {\n        console.log('ComponentDidMount');\n        const { socket } = this.state;\n        socket.on('data', (data) => {\n            console.log(data);\n            switch (data.type) {\n                case 'pred':\n                    this.setState({prediction: data.data});\n                    break;\n                case 'event':\n                    if (data.data === 'loaded') {  // Model loaded\n                        this.setState({ loaded: true });\n                        setInterval(() => {\n                            this.getFrame();\n                        }, 10000);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n        socket.on('connect_error', () => { message.error('ERROR!') })\n\n    }\n\n    async getFrame() {\n        console.log('Getting frame');\n        const video = document.getElementById(\"video\");\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = 224;\n        canvas.height = 224;  // Video dimensions. See camera.js\n        canvas.getContext('2d')\n            .drawImage(video, 0, 0, canvas.width, canvas.height);\n        try {\n            const tensor = tf.browser.fromPixels(canvas);\n            // const arrayTensor = await tensor.data();\n            const arrayTensor = tensor2array_3d_helper(tensor);\n            console.log('Shape:'+arrayTensor.length);\n            console.log(arrayTensor);\n            // await this.sendFrame(arrayTensor, 1024);\n            await this.state.socket.emit('data', { type: 'tensor', data: arrayTensor});\n            // await this.state.socket.emit('data', { type: 'event', data: 'transfer complete' });\n            console.log('Send complete');\n            // console.log(\"Tensor:\"+arrayTensor);\n        } catch (e) {  // Width 0 error\n            console.log(e);\n            return;\n        }\n        // var img = document.createElement(\"img\");\n        // img.src = canvas.toDataURL('image/png');\n        // console.log(img);\n        // return(\n        //     <div>\n        //         <img id=\"frame\" src={canvas.toDataURL('image/png')} alt=''/>\n        //     </div>\n        // )\n    }\n\n    // async sendFrame(frame, bufferSize) {\n    //     const stringTensor = frame.toJSON();\n    //     var startIndex, endIndex;\n    //     console.log(stringTensor);\n    //     await this.state.socket.emit('data', { type: 'event', data: 'transfer start'});\n    //     for (let i=0; i < stringTensor.length; i+=bufferSize) {\n    //         startIndex = i;\n    //         endIndex = i + bufferSize;\n    //         if (endIndex > stringTensor.length) endIndex = stringTensor.length;\n    //         await this.state.socket.emit('data', { type: 'tensorBuffer', data: stringTensor.slice(startIndex, endIndex)});\n    //     }\n    // }\n\n    render() {\n        const { loaded } = this.state;\n        console.log(this.state.data);\n        if (!loaded) {\n            return (\n                <>\n                    <Spin\n                        size=\"large\"\n                        wrapperClassName='load-spin'\n                    />\n                </>\n            )\n        } else {\n            return (\n                <>\n                    <br/>\n                    <WebCamWebAPI/>\n                    <h1>Prediction: {this.state.prediction}</h1>\n                </>\n            );\n        }\n    }\n}\n\nexport default App;\n","E:\\cascience-proj-demo\\src\\upload_component.js",["26"],"import React from 'react';\r\nimport { Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\nconst { Dragger } = Upload;\r\n\r\n// class DragUpload extends React.Component {\r\n  \r\n// }\r\n\r\nfunction processRequest({ onSuccess, data, filename, file}) {\r\n  console.log(onSuccess, data, filename, file);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n  if (!isJpgOrPng) {\r\n    message.error('只能上传JPG或PNG格式的文件！');\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n  if (!isLt2M) {\r\n    message.error('图片大小必须小于2MB！');\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\nfunction loadImage(callback) {\r\n  const { file, onSuccess } = callback;\r\n  const reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n  reader.addEventListener('load', () => {\r\n    const imageData = reader.result;\r\n    this.setState({\r\n      imageData,\r\n      imageName: file.name,\r\n      loading: false,\r\n    });\r\n    onSuccess();\r\n    console.log(this.state)\r\n  });\r\n}\r\n\r\nexport const DragUpload = () => {\r\n  return (\r\n    <Dragger\r\n      multiple={false}\r\n      customRequest={processRequest}\r\n      beforeUpload={beforeUpload}\r\n    >\r\n      <p className=\"ant-upload-drag-icon\">\r\n        <InboxOutlined />\r\n      </p>\r\n      <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n      <p className=\"ant-upload-hint\">\r\n        Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n        band files\r\n      </p>\r\n  </Dragger>\r\n  );\r\n}",["27","28"],"E:\\cascience-proj-demo\\src\\camera.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":12,"column":22,"nodeType":"35","messageId":"36","endLine":12,"endColumn":33},{"ruleId":"33","severity":1,"message":"34","line":16,"column":23,"nodeType":"35","messageId":"36","endLine":16,"endColumn":34},{"ruleId":"37","severity":1,"message":"38","line":27,"column":10,"nodeType":"39","messageId":"40","endLine":27,"endColumn":19},{"ruleId":"29","replacedBy":"41"},{"ruleId":"31","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-unused-vars","'loadImage' is defined but never used.","Identifier","unusedVar",["43"],["44"],"no-global-assign","no-unsafe-negation"]